{"ast":null,"code":"import _asyncToGenerator from \"/Users/rohantyagi/Desktop/landing-website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { of } from 'rxjs';\nimport * as Papa from 'papaparse';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/storage\";\nimport * as i3 from \"@angular/fire/compat/functions\";\nlet WasmService = /*#__PURE__*/(() => {\n  class WasmService {\n    constructor(http, storage, fns) {\n      this.http = http;\n      this.storage = storage;\n      this.fns = fns;\n      this.isModuleInitialized = false;\n      this.recipeData = [];\n      this.productNames = [];\n      this.productSales = [];\n      this.dishes = [];\n      this.cogs = 0;\n      this.dishPrice = 0;\n      this.optOrderQuant = 0;\n      this.orderFreq = 0;\n      this.reorderPoint = 0;\n      this.ingredientQuantAmtData = [];\n      this.ingredProdSales = [];\n      this.getIngredientsFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getRecipesTextFile\";\n      this.getSalesFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getSalesFile\";\n      this.getQuantsAmtsFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getPurchasingTextFile\";\n      this.initModule();\n    }\n    initModule() {\n      if (!this.isModuleInitialized) {\n        const script = document.createElement('script');\n        script.src = 'assets/COGScalc.js';\n        script.onload = () => {\n          // The script has been fully loaded, and you can now access the WebAssembly module\n          console.log('Module:', Module); // Add this line for debugging\n          this.cogCalcModule = Module;\n          // Initialization logic, if needed\n          this.isModuleInitialized = true;\n        };\n        document.body.appendChild(script);\n      }\n    }\n    // Define functions to interact with your WebAssembly module\n    runAnalysis(data) {\n      //get the data frpom Firebase Storage and dispaly the outputs here.\n      // Example: Call a function from the WebAssembly module\n      // return this.cogCalcModule.yourAnalysisFunction(data);\n    }\n    getIngredientDataFromServer(dishName) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n        // get the ingredients txt returned here\n        console.log(\"why yes\");\n        console.log(dishName);\n        const filePath = 'assets/ingredients.txt'; // Adjust the path accordingly\n        let fileContent = '';\n        yield _this.http.get(filePath, {\n          responseType: 'text'\n        }).subscribe(content => {\n          fileContent = content;\n          console.log(\"getting file content:\");\n          console.log(fileContent);\n          return content;\n        }, error => {\n          console.error('Error fetching file:', error);\n        });\n        return null;\n      })();\n    }\n    createProductQuantityMap() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const salesResponse = yield _this2.http.get('assets/sales.csv', {\n          responseType: 'text'\n        }).toPromise();\n        yield Papa.parse(salesResponse, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            result.data.forEach(row => {\n              const product = row.Product;\n              const quantity = parseInt(row.Quantity, 10);\n              if (product && !isNaN(quantity)) {\n                // Add or update the quantity for the product in the map\n                _this2.productNames.push(product);\n                _this2.productSales.push(quantity);\n              }\n            });\n          }\n        });\n      })();\n    }\n    getFileFromStorage(filePath) {\n      if (this.checkFileExists(filePath)) {\n        const storageRef = this.storage.ref(filePath);\n        return storageRef.getDownloadURL();\n      }\n    }\n    checkFileExists(filename) {\n      const storageRef = this.storage.ref(filename);\n      storageRef.getDownloadURL().subscribe(url => {\n        console.log(`File ${filename} exists. URL: ${url}`);\n        return true;\n      }, error => {\n        if (error.code === 'storage/object-not-found') {\n          console.log(`File ${filename} does not exist.`);\n        } else {\n          console.error('Error checking file existence:', error);\n        }\n        return false;\n      });\n      return false;\n    }\n    getQuantAmtDataFromServer(dishName) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n        const filePath = 'assets/ingredientsQuantAmt.txt'; // Adjust the path accordingly\n        let fileContent = '';\n        _this3.http.get(filePath, {\n          responseType: 'text'\n        }).subscribe(content => {\n          fileContent = content;\n          //console.log(fileContent);\n          return content;\n        }, error => {\n          console.error('Error fetching file:', error);\n        });\n        return null;\n      })();\n    }\n    getSalesDataFromServer(dishName) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n        const filePath = 'assets/sales.csv'; // Adjust the path accordingly\n        let fileContent = '';\n        _this4.http.get(filePath, {\n          responseType: 'text'\n        }).subscribe(content => {\n          fileContent = content;\n          //console.log(fileContent);\n          return fileContent;\n        }, error => {\n          console.error('Error fetching file:', error);\n        });\n        return null;\n      })();\n    }\n    //   // Helper method to read the contents of a text file\n    //   private readTextFile(filePath: string): string {\n    //     const file = FS.readFile(filePath, { encoding: 'utf8' });\n    //     return file;\n    //   }\n    // Helper method to find a row with a specified first element in a CSV-like text file\n    findRowWithFirstElement(fileContents, element) {\n      // Implementation logic for finding the row\n      // ...\n      return this.cogCalcModule.findRowWithFirstElement(fileContents, element);\n    }\n    // Helper method to get a specific line by row number in a text file\n    getLineByRowNumber(fileContents, rowNumber) {\n      // Implementation logic for getting the line\n      return this.cogCalcModule.getLineByRowNumber(fileContents, rowNumber);\n    }\n    calculateOptimalOrderQuantity(orderCost, sales, storingCost) {\n      this.optOrderQuant = this.cogCalcModule.calculateOptimalOrderQuantity(orderCost, sales, storingCost);\n      return this.optOrderQuant;\n    }\n    calculateSafetyStock(maxLeadTime, averageLeadTime, averageSales) {\n      return this.cogCalcModule.calculateSafetyStock(maxLeadTime, averageLeadTime, averageSales);\n    }\n    calculateReorderPoint(safetyStock, averageConsumption, leadTime) {\n      this.reorderPoint = this.cogCalcModule.calculateReorderPoint(safetyStock, averageConsumption, leadTime);\n      return this.reorderPoint;\n    }\n    getAllSalesData() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        const salesResponse = yield _this5.http.get('assets/sales.csv', {\n          responseType: 'text'\n        }).toPromise();\n      })();\n    }\n    calculateIngredientReorderPoint(ingredName) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const salesResponse = yield _this6.http.get('assets/sales.csv', {\n            responseType: 'text'\n          }).toPromise();\n          const ingredientsResponse = yield _this6.http.get('assets/ingredients.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const ingredQuantAmts = yield _this6.http.get('assets/ingredientsQuantAmt.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const dishInfo = yield _this6.parseIngredientsTxtData(ingredientsResponse);\n          const purchasingInfo = yield _this6.parseIngredientsQuantAmtTxtData(ingredQuantAmts);\n          const salesInfo = yield _this6.parseSalesCSVData(salesResponse, ingredName, dishInfo);\n          // return {productName, ingredAmt/product, productSales}[]\n          // calculate order cost by multiplying ingredAmt/product by sales multiplied by the purchasing cost/purchasing amt\n          const pI = purchasingInfo.find(p => p.name == ingredName);\n          let orderCost = 0;\n          let prodSales = 0;\n          for (const prod of salesInfo) {\n            orderCost += prod.ingredAmt * +prod.productSales * (pI.price / pI.quantity);\n            prodSales += +prod.productSales;\n          }\n          _this6.calculateReorderPoint(50, prodSales / salesInfo.length, 10);\n        } catch (error) {\n          console.error('Error calculating optimal order quantity:', error);\n          throw error; // Rethrow the error for the caller to handle\n        }\n      })();\n    }\n\n    getDishNames() {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        //get all the dish names in the ingredients.txt file\n        const ingredientsResponse = yield _this7.http.get('assets/ingredients.txt', {\n          responseType: 'text'\n        }).toPromise();\n        const dishInfo = yield _this7.parseIngredientsTxtData(ingredientsResponse);\n        const lines = ingredientsResponse.split(';');\n        console.log(lines);\n        for (const line of lines) {\n          const values = line.split(',');\n          // console.log(values);\n          if (values[0].length > 2) {\n            const dName = values[0];\n            // console.log(dName);\n            _this7.dishes.push(dName);\n          }\n        }\n      })();\n    }\n    getIngredients(dishName) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        const ingredientsResponse = yield _this8.http.get('assets/ingredients.txt', {\n          responseType: 'text'\n        }).toPromise();\n        const dishIngreds = _this8.findLineByFirstElem(ingredientsResponse, dishName);\n        console.log(dishIngreds);\n        const ingreds = dishIngreds.split(\",\");\n        // console.log(ingreds);\n        for (let i = 2; i < ingreds.length; i += 2) {\n          console.log(ingreds[i]);\n          _this8.ingredients.push(ingreds[i]);\n        }\n      })();\n    }\n    calculateProfitMargin(fileName, dishPrice, dishName, more) {\n      return new Promise((resolve, reject) => {\n        if (!this.isModuleInitialized) {\n          reject('WebAssembly module not initialized.');\n          return;\n        }\n        // Use Module to call the calculateProfitMargin function\n        this.cogCalcModule.calculateProfitMargin(dishPrice, this.calculateIngredientDirectCostfromData(dishName), result => {\n          resolve(result);\n        });\n      });\n    }\n    parseIngredientsTxtData(ingredientsTxtData) {\n      const lines = ingredientsTxtData.split(';');\n      const ingredients = [];\n      lines.forEach(line => {\n        const values = line.split(',');\n        if (values.length > 1 && values[0].length > 2) {\n          const name = values[0];\n          const dishPrice = parseFloat(values[1]);\n          for (let i = 2; i < values.length; i += 2) {\n            const ingredientName = values[i];\n            const ingredientQuantity = parseFloat(values[i + 1]);\n            ingredients.push({\n              name: ingredientName,\n              quantity: ingredientQuantity\n            });\n          }\n          this.recipeData.push({\n            name,\n            dishPrice,\n            ingredients\n          });\n        }\n      });\n      return this.recipeData;\n    }\n    parseIngredientsQuantAmtTxtData(ingredientsQuantAmtTxtData) {\n      const lines = ingredientsQuantAmtTxtData.split('\\n');\n      lines.forEach(line => {\n        const values = line.split(',');\n        if (values.length > 1 && values[0].length > 2) {\n          const ingredientName = values[0];\n          const quantity = parseFloat(values[1]);\n          const price = parseFloat(values[2]);\n          this.ingredientQuantAmtData.push({\n            name: ingredientName,\n            quantity,\n            price\n          });\n        }\n      });\n      return this.ingredientQuantAmtData;\n    }\n    parseSalesCSVData(salesCSV, ingredName, dishInfo) {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        // this.cogCalcModule.search_dish_sales_by_name(dishName, 'assets/ingredients.txt');\n        // Remove null bytes\n        const cleanedContent = salesCSV.replace(/\\0/g, '');\n        // Create a stringstream from cleaned content starting from row 4\n        const contentLines = cleanedContent.split('\\n').slice(3);\n        const matchingRecipes = dishInfo.filter(recipe => recipe.ingredients.some(ingredient => ingredient.name === ingredName));\n        //go through each matching Recipe and find the line with the corresponding sales data\n        for (const recipe of matchingRecipes) {\n          const line = _this9.findLineByFirstElement(cleanedContent, recipe.name);\n          const [firstColumn, ...otherColumns] = line.split(',');\n          if (firstColumn.trim().length > 0) {\n            const prodSales = otherColumns[0];\n            _this9.ingredProdSales.push({\n              productName: prodSales,\n              ingredAmt: recipe.ingredients.find(i => i.name = ingredName).quantity,\n              productSales: prodSales\n            });\n          }\n        }\n        // return {productName, ingredAmt/product, productSales}\n        return _this9.ingredProdSales;\n      })();\n    }\n    findLineByFirstElement(csvContent, targetElement) {\n      // Split the CSV content into lines\n      const lines = csvContent.split('\\n');\n      // Iterate through the lines\n      for (const line of lines) {\n        // Split the line into columns based on the CSV delimiter (e.g., comma)\n        const columns = line.split(',');\n        // Check if the first column matches the target element\n        if (columns.length > 0 && columns[0].trim() === targetElement) {\n          return line; // Return the entire line\n        }\n      }\n    }\n\n    findLineByFirstElem(txtContent, targetElement) {\n      // Split the CSV content into lines\n      const lines = txtContent.split(';');\n      // Iterate through the lines\n      for (const line of lines) {\n        // Split the line into columns based on the CSV delimiter (e.g., comma)\n        // console.log(line[0]);\n        if (line.length > 0 && line !== undefined) {\n          console.log(line);\n          const ingreds = line.split(\",\");\n          console.log(ingreds);\n          // Check if the first column matches the target element\n          if (ingreds[0].length > 0 && ingreds[0].trim() === targetElement) {\n            return line; // Return the entire line\n          }\n        }\n      }\n    }\n\n    calculateSingleIngredientDirectCost(ingredAmt, ingredPrice, ingredQuant) {\n      // Implement your cost calculation logic here\n      // Example: return ingredAmt * ingredPrice / ingredQuant;\n      return ingredAmt * (ingredQuant / ingredPrice);\n    }\n    calculateIngredientOptimalOrderQuantity(ingredName) {\n      var _this10 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const salesResponse = yield _this10.http.get('assets/sales.csv', {\n            responseType: 'text'\n          }).toPromise();\n          const ingredientsResponse = yield _this10.http.get('assets/ingredients.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const ingredQuantAmts = yield _this10.http.get('assets/ingredientsQuantAmt.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const dishInfo = yield _this10.parseIngredientsTxtData(ingredientsResponse);\n          const purchasingInfo = yield _this10.parseIngredientsQuantAmtTxtData(ingredQuantAmts);\n          const salesInfo = yield _this10.parseSalesCSVData(salesResponse, ingredName, dishInfo);\n          // return {productName, ingredAmt/product, productSales}[]\n          // calculate order cost by multiplying ingredAmt/product by sales multiplied by the purchasing cost/purchasing amt\n          const pI = purchasingInfo.find(p => p.name == ingredName);\n          let orderCost = 0;\n          let prodSales = 0;\n          for (const prod of salesInfo) {\n            orderCost += prod.ingredAmt * +prod.productSales * (pI.price / pI.quantity);\n            prodSales += +prod.productSales;\n          }\n          _this10.calculateOptimalOrderQuantity(orderCost, prodSales, 10);\n        } catch (error) {\n          console.error('Error calculating optimal order quantity:', error);\n          throw error; // Rethrow the error for the caller to handle\n        }\n      })();\n    }\n\n    calculateOrderingFreq(ingredName) {\n      var _this11 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const salesResponse = yield _this11.http.get('assets/sales.csv', {\n            responseType: 'text'\n          }).toPromise();\n          const ingredientsResponse = yield _this11.http.get('assets/ingredients.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const ingredQuantAmts = yield _this11.http.get('assets/ingredientsQuantAmt.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const dishInfo = yield _this11.parseIngredientsTxtData(ingredientsResponse);\n          const purchasingInfo = yield _this11.parseIngredientsQuantAmtTxtData(ingredQuantAmts);\n          const salesInfo = yield _this11.parseSalesCSVData(salesResponse, ingredName, dishInfo);\n          // return {productName, ingredAmt/product, productSales}[]\n          // calculate order cost by multiplying ingredAmt/product by sales multiplied by the purchasing cost/purchasing amt\n          const pI = purchasingInfo.find(p => p.name == ingredName);\n          let orderCost = 0;\n          let prodSales = 0;\n          for (const prod of salesInfo) {\n            orderCost += prod.ingredAmt * +prod.productSales * (pI.price / pI.quantity);\n            prodSales += +prod.productSales;\n          }\n          _this11.calculateOrderingFrequency(prodSales, orderCost, 10);\n        } catch (error) {\n          console.error('Error calculating optimal order quantity:', error);\n          throw error; // Rethrow the error for the caller to handle\n        }\n      })();\n    }\n\n    calculateIngredientDirectCostfromData(dishName) {\n      var _this12 = this;\n      return _asyncToGenerator(function* () {\n        //unwrap promise before sending it\n        // trying to make promise work\n        // console.log(\"calculating\");\n        try {\n          const ingredientsResponse = yield _this12.http.get('assets/ingredients.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const dishInfo = yield _this12.parseIngredientsTxtData(ingredientsResponse);\n          const dishIn = dishInfo.find(recipe => recipe.name === dishName);\n          console.log(dishIn);\n          _this12.dishPrice = dishIn.dishPrice;\n          // Fetch ingredientsQuantAmt.txt\n          const purchasingInfoResponse = yield _this12.http.get('assets/ingredientsQuantAmt.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const purchasingInfo = yield _this12.parseIngredientsQuantAmtTxtData(purchasingInfoResponse);\n          let costs = 0;\n          let ingredient;\n          for (ingredient of dishIn.ingredients) {\n            const ingredQA = purchasingInfo.find(ingredQuantAmt => ingredQuantAmt.name == ingredient.name);\n            console.log(ingredQA);\n            const ingredAmt = ingredient.quantity;\n            const ingredQuant = ingredQA.quantity;\n            const ingredPrice = ingredQA.price;\n            const cost = yield _this12.calculateSingleIngredientDirectCost(ingredAmt, ingredPrice, ingredQuant);\n            costs += cost;\n          }\n          _this12.cogs = costs;\n          return of(costs);\n        } catch (error) {\n          console.error('Error calculating cost:', error);\n          throw error; // Rethrow the error for the caller to handle\n        }\n      })();\n    }\n\n    calculateOrderingFrequency(demandRate, orderingCost, holdingCost) {\n      this.orderFreq = this.cogCalcModule.calculateOrderingFrequency(demandRate, orderingCost, holdingCost);\n      return this.orderFreq;\n    }\n    dishExistsInFile(fileContent, targetWords) {\n      return this.cogCalcModule.dishExistsInFile(fileContent, targetWords);\n    }\n    static #_ = this.ɵfac = function WasmService_Factory(t) {\n      return new (t || WasmService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireStorage), i0.ɵɵinject(i3.AngularFireFunctions));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WasmService,\n      factory: WasmService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WasmService;\n})();\nexport { WasmService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}