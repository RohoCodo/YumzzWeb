{"ast":null,"code":"import _asyncToGenerator from \"/Users/rohantyagi/Desktop/landing-website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nlet WasmService = /*#__PURE__*/(() => {\n  class WasmService {\n    constructor() {\n      this.isModuleInitialized = false;\n      this.initModule();\n    }\n    initModule() {\n      if (!this.isModuleInitialized) {\n        Module.onRuntimeInitialized = () => {\n          // Initialization logic, if needed\n        };\n        // Load the WebAssembly module\n        const script = document.createElement('script');\n        script.src = 'assets/COGScalc.js'; // Update with the correct path\n        document.body.appendChild(script);\n        this.isModuleInitialized = true;\n      }\n    }\n    // Define functions to interact with your WebAssembly module\n    runAnalysis(data) {\n      //get the data frpom Firebase Storage and dispaly the outputs here.\n      // Example: Call a function from the WebAssembly module\n      return Module.yourAnalysisFunction(data);\n    }\n    //   runProfitMarginCalculator(foodCosts: number[]): number[] {\n    //     if (!this.isModuleInitialized) {\n    //       console.error('WebAssembly module not initialized.');\n    //       return [];\n    //     }\n    //     // Call the exported function from the WebAssembly module\n    //     // Adjust the function name and parameters based on your C++ code\n    //     const result = Module._calculateProfitMargin(foodCosts);\n    //     // Convert the result to an array (adjust as needed)\n    //     const resultArray = new Float64Array(result);\n    //     return Array.from(resultArray);\n    //   }\n    fetchDishCostsFromStorage(dishName) {\n      // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n      const filePath = `path/to/your/ingredients.txt`;\n      // Get a reference to the file in Firebase Storage\n      const ref = this.storage.ref(filePath);\n      // Get the download URL of the file\n      return ref.getDownloadURL().toPromise().then(url => {\n        // Fetch the text file content using Angular's HttpClient\n        return this.http.get(url, {\n          responseType: 'text'\n        }).toPromise();\n      }).then(fileContent => {\n        // Process the file content to get the dish costs for the specified dishName\n        const row = this.findRowWithFirstElement(fileContent, dishName);\n        const line = this.getLineByRowNumber(fileContent, row);\n        const dishCosts = this.getDishCostsFromLine(line);\n        return dishCosts;\n      });\n    }\n    calculateProfitMargin(dishCosts, dishPrice, dishName, more) {\n      return new Promise((resolve, reject) => {\n        if (!this.isModuleInitialized) {\n          reject('WebAssembly module not initialized.');\n          return;\n        }\n        // Use Module to call the calculateProfitMargin function\n        Module.calculateProfitMargin(dishCosts, dishPrice, dishName, more, result => {\n          resolve(result);\n        });\n      });\n    }\n    // Method to read dish costs from a text file\n    getDishCostsFromFile(filePath, dishName) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          try {\n            // Read the contents of the text file\n            const fileContents = _this.readTextFile(filePath);\n            // Parse the contents and find the dish cost\n            const row = _this.findRowWithFirstElement(fileContents, dishName);\n            const line = _this.getLineByRowNumber(fileContents, row);\n            const dPrice = _this.extractDishPriceFromLine(line);\n            // Resolve with the dish cost (parsed as a number)\n            resolve(parseFloat(dPrice));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      })();\n    }\n    // Helper method to read the contents of a text file\n    readTextFile(filePath) {\n      const file = FS.readFile(filePath, {\n        encoding: 'utf8'\n      });\n      return file;\n    }\n    // Helper method to find a row with a specified first element in a CSV-like text file\n    findRowWithFirstElement(fileContents, element) {\n      // Implementation logic for finding the row\n      // ...\n      const lines = fileContents.split('\\n');\n      let rowNum = 0;\n      for (const line of lines) {\n        ++rowNum;\n        const [firstElement] = line.split(',');\n        if (firstElement === element) {\n          return rowNum;\n        }\n      }\n      console.log(rowNum);\n      return -1;\n      // Replace this with your actual implementation\n      return 1; // Example: always returning the first row\n    }\n    // Helper method to get a specific line by row number in a text file\n    getLineByRowNumber(fileContents, rowNumber) {\n      // Implementation logic for getting the line\n      const lines = fileContents.split('\\n');\n      // If the row number is valid\n      if (rowNumber > 0 && rowNumber <= lines.length) {\n        // Return the line associated with the specified row number\n        return lines[rowNumber - 1];\n      } else {\n        console.log(rowNumber);\n        return \"\"; // Return an empty string if the row number is invalid\n      }\n    }\n    // Helper method to extract dish price from a CSV-like line\n    extractDishPriceFromLine(line) {\n      // Implementation logic for extracting dish price\n      // ...\n      // Replace this with your actual implementation\n      return ''; // Example: returning an empty string\n    }\n    static #_ = this.ɵfac = function WasmService_Factory(t) {\n      return new (t || WasmService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WasmService,\n      factory: WasmService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WasmService;\n})();\nexport { WasmService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}