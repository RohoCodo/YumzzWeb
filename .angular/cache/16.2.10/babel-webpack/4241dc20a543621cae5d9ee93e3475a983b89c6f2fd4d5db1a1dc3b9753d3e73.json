{"ast":null,"code":"import * as i0 from \"@angular/core\";\nlet WasmService = /*#__PURE__*/(() => {\n  class WasmService {\n    constructor() {\n      this.isModuleInitialized = false;\n      this.initModule();\n    }\n    initModule() {\n      if (!this.isModuleInitialized) {\n        Module.onRuntimeInitialized = () => {\n          // Initialization logic, if needed\n        };\n        // Load the WebAssembly module\n        const script = document.createElement('script');\n        script.src = 'assets/COGScalc.js'; // Update with the correct path\n        document.body.appendChild(script);\n        this.isModuleInitialized = true;\n      }\n    }\n    // Define functions to interact with your WebAssembly module\n    runAnalysis(data) {\n      //get the data frpom Firebase Storage and dispaly the outputs here.\n      // Example: Call a function from the WebAssembly module\n      return Module.yourAnalysisFunction(data);\n    }\n    //   runProfitMarginCalculator(foodCosts: number[]): number[] {\n    //     if (!this.isModuleInitialized) {\n    //       console.error('WebAssembly module not initialized.');\n    //       return [];\n    //     }\n    //     // Call the exported function from the WebAssembly module\n    //     // Adjust the function name and parameters based on your C++ code\n    //     const result = Module._calculateProfitMargin(foodCosts);\n    //     // Convert the result to an array (adjust as needed)\n    //     const resultArray = new Float64Array(result);\n    //     return Array.from(resultArray);\n    //   }\n    calculateProfitMargin(dishCosts, dishPrice, dishName, more) {\n      return new Promise((resolve, reject) => {\n        if (!this.isModuleInitialized) {\n          reject('WebAssembly module not initialized.');\n          return;\n        }\n        // Use Module to call the calculateProfitMargin function\n        Module.calculateProfitMargin(dishCosts, dishPrice, dishName, more, result => {\n          resolve(result);\n        });\n      });\n    }\n    static #_ = this.ɵfac = function WasmService_Factory(t) {\n      return new (t || WasmService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WasmService,\n      factory: WasmService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WasmService;\n})();\nexport { WasmService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}