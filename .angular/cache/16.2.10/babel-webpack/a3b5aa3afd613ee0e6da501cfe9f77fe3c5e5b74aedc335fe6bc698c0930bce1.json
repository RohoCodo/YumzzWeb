{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Chart from 'chart.js/auto';\nlet AdminHomePageComponent = class AdminHomePageComponent {\n  constructor(wasmService, storage) {\n    this.wasmService = wasmService;\n    this.storage = storage;\n    this.dishName = '';\n    this.ingredient = '';\n    this.ingredientsTxtData = ''; // Text of Text file gotten from firebase\n    this.ingredientsQuantAmtTxtData = ''; // Text of Text file gotten from firebase\n    this.recipeData = [];\n    this.ingredientQuantAmtData = [];\n    // Replace these arrays with your actual data\n    this.dishNames = [\"Dish1\", \"Dish2\", \"Dish3\", \"Dish4\", \"Dish5\"];\n    this.foodCosts = [10, 15, 12, 8, 20];\n    this.orderingFrequency = [2, 3, 1, 4, 2];\n    this.reorderAlert = [false, true, false, true, false]; // Replace with actual boolean values\n    this.runningLowReminder = [true, false, true, false, true]; // Replace with actual boolean values\n    this.reorderPoint = [30, 25, 35, 20, 40];\n  }\n  ngOnInit() {\n    const filePath = 'gs://virtual-menu-59b9e.appspot.com/Restaurant/Kathmandu-Cuisine/Recipes/ingredients.txt'; // Replace with the actual file path\n    this.getFileFromStorage(filePath).subscribe(downloadURL => {\n      console.log(`File download URL: ${downloadURL}`);\n      // Handle the download URL as needed\n    }, error => {\n      console.error('Error getting file from storage:', error);\n    });\n    // Create chart instances with your data\n    // Example: Use the WasmService to run your C++ analysis\n    // const result = this.wasmService.runAnalysis(this.foodCostsChart);\n    // console.log('Analysis Result:', result);\n    // this.foodCostsChart = this.createBarChart('foodCostsChart', 'Food Costs', this.foodCosts, 'blue');\n    // this.orderingFrequencyChart = this.createBarChart('orderingFrequencyChart', 'Ordering Frequency', this.orderingFrequency, 'green');\n    // this.reorderAlertChart = this.createBarChart('reorderAlertChart', 'Reorder Alert', this.reorderAlert.map(alert => alert ? 1 : 0), 'red');\n    // this.runningLowReminderChart = this.createBarChart('runningLowReminderChart', 'Running Low Reminder', this.runningLowReminder.map(reminder => reminder ? 1 : 0), 'orange');\n    // this.reorderPointChart = this.createBarChart('reorderPointChart', 'Reorder Point', this.reorderPoint, 'purple');\n  }\n  // Function to create a bar chart\n  createBarChart(canvasId, label, data, color) {\n    const canvas = document.getElementById(canvasId);\n    const ctx = canvas.getContext('2d');\n    return new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: this.dishNames,\n        datasets: [{\n          label: label,\n          data: data,\n          backgroundColor: color\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n  getFileFromStorage(filePath) {\n    if (this.checkFileExists(filePath)) {\n      const storageRef = this.storage.ref(filePath);\n      return storageRef.getDownloadURL();\n    }\n  }\n  checkFileExists(filename) {\n    const storageRef = this.storage.ref(filename);\n    storageRef.getDownloadURL().subscribe(url => {\n      console.log(`File ${filename} exists. URL: ${url}`);\n      return true;\n    }, error => {\n      if (error.code === 'storage/object-not-found') {\n        console.log(`File ${filename} does not exist.`);\n      } else {\n        console.error('Error checking file existence:', error);\n      }\n      return false;\n    });\n    return false;\n  }\n  calculateProfitMargin() {\n    this.profitabilityResult = 86;\n    // console.log(this.dishName);\n    // this.wasmService.calculateIngredientDirectCostfromData(this.dishName.replace(/\\s+/g, '-')).subscribe(\n    //   (result) => {\n    //     this.profitabilityResult = result;\n    //   },\n    //   (error) => {\n    //     console.error('Error calculating profitability:', error);\n    //     // Handle errors as needed\n    //   }\n    // );\n  }\n\n  calculateCOGS() {\n    this.cogsResult = 2.99;\n  }\n  calculateOptimalOrderQuantity() {\n    console.log(this.dishName);\n    this.optimalorderQuantity = 0;\n    // this,this.wasmService.calculateOptimalOrderQuantity()\n    // this.wasmService.calculateIngredientDirectCostfromData(this.dishName.replace(/\\s+/g, '-')).subscribe(\n    //   (result) => {\n    //     this.optimalorderQuantity = result;\n    //   },\n    //   (error) => {\n    //     console.error('Error calculating profitability:', error);\n    //     // Handle errors as needed\n    //   }\n    // );\n  }\n  // Method to handle button click\n  onCalculateProfitMarginClick() {\n    this.calculateProfitMargin();\n  }\n  deleteDish() {\n    // Call your API endpoint with this.dishName, etc.\n    // Handle the response\n  }\n  calculateSafetyStock() {}\n  calculateReorderPoint() {}\n};\nAdminHomePageComponent = __decorate([Component({\n  selector: 'admin-homepage',\n  templateUrl: './admin-homepage.component.html',\n  styleUrls: ['./admin-homepage.component.css']\n})], AdminHomePageComponent);\nexport { AdminHomePageComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}