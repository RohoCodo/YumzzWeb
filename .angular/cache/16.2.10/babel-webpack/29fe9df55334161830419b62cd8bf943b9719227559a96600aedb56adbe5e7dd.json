{"ast":null,"code":"/**\n * Highcharts JS v11.2.0 (2023-10-30)\n *\n * Exporting module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */!function (e) {\n  \"object\" == typeof module && module.exports ? (e.default = e, module.exports = e) : \"function\" == typeof define && define.amd ? define(\"highcharts/modules/export-data\", [\"highcharts\", \"highcharts/modules/exporting\"], function (t) {\n    return e(t), e.Highcharts = t, e;\n  }) : e(\"undefined\" != typeof Highcharts ? Highcharts : void 0);\n}(function (e) {\n  \"use strict\";\n\n  var t = e ? e._modules : {};\n  function a(e, t, a, o) {\n    e.hasOwnProperty(t) || (e[t] = o.apply(null, a), \"function\" == typeof CustomEvent && window.dispatchEvent(new CustomEvent(\"HighchartsModuleLoaded\", {\n      detail: {\n        path: t,\n        module: e[t]\n      }\n    })));\n  }\n  a(t, \"Extensions/DownloadURL.js\", [t[\"Core/Globals.js\"]], function (e) {\n    let {\n        isSafari: t,\n        win: a,\n        win: {\n          document: o\n        }\n      } = e,\n      n = a.URL || a.webkitURL || a;\n    function i(e) {\n      let t = e.replace(/filename=.*;/, \"\").match(/data:([^;]*)(;base64)?,([0-9A-Za-z+/]+)/);\n      if (t && t.length > 3 && a.atob && a.ArrayBuffer && a.Uint8Array && a.Blob && n.createObjectURL) {\n        let e = a.atob(t[3]),\n          o = new a.ArrayBuffer(e.length),\n          i = new a.Uint8Array(o);\n        for (let t = 0; t < i.length; ++t) i[t] = e.charCodeAt(t);\n        return n.createObjectURL(new a.Blob([i], {\n          type: t[1]\n        }));\n      }\n    }\n    return {\n      dataURLtoBlob: i,\n      downloadURL: function (e, n) {\n        let r = a.navigator,\n          s = o.createElement(\"a\");\n        if (\"string\" != typeof e && !(e instanceof String) && r.msSaveOrOpenBlob) {\n          r.msSaveOrOpenBlob(e, n);\n          return;\n        }\n        e = \"\" + e;\n        let l = /Edge\\/\\d+/.test(r.userAgent),\n          h = t && \"string\" == typeof e && 0 === e.indexOf(\"data:application/pdf\");\n        if ((h || l || e.length > 2e6) && !(e = i(e) || \"\")) throw Error(\"Failed to convert to blob\");\n        if (void 0 !== s.download) s.href = e, s.download = n, o.body.appendChild(s), s.click(), o.body.removeChild(s);else try {\n          if (!a.open(e, \"chart\")) throw Error(\"Failed to open window\");\n        } catch {\n          a.location.href = e;\n        }\n      }\n    };\n  }), a(t, \"Extensions/ExportData/ExportDataDefaults.js\", [], function () {\n    return {\n      exporting: {\n        csv: {\n          annotations: {\n            itemDelimiter: \"; \",\n            join: !1\n          },\n          columnHeaderFormatter: null,\n          dateFormat: \"%Y-%m-%d %H:%M:%S\",\n          decimalPoint: null,\n          itemDelimiter: null,\n          lineDelimiter: \"\\n\"\n        },\n        showTable: !1,\n        useMultiLevelHeaders: !0,\n        useRowspanHeaders: !0\n      },\n      lang: {\n        downloadCSV: \"Download CSV\",\n        downloadXLS: \"Download XLS\",\n        exportData: {\n          annotationHeader: \"Annotations\",\n          categoryHeader: \"Category\",\n          categoryDatetimeHeader: \"DateTime\"\n        },\n        viewData: \"View data table\",\n        hideData: \"Hide data table\"\n      }\n    };\n  }), a(t, \"Extensions/ExportData/ExportData.js\", [t[\"Core/Renderer/HTML/AST.js\"], t[\"Extensions/ExportData/ExportDataDefaults.js\"], t[\"Core/Globals.js\"], t[\"Core/Defaults.js\"], t[\"Extensions/DownloadURL.js\"], t[\"Core/Series/SeriesRegistry.js\"], t[\"Core/Utilities.js\"]], function (e, t, a, o, n, i, r) {\n    let {\n        doc: s,\n        win: l\n      } = a,\n      {\n        getOptions: h,\n        setOptions: c\n      } = o,\n      {\n        downloadURL: d\n      } = n,\n      {\n        series: p,\n        seriesTypes: {\n          arearange: u,\n          gantt: m,\n          map: f,\n          mapbubble: x,\n          treemap: g,\n          xrange: b\n        }\n      } = i,\n      {\n        addEvent: y,\n        defined: D,\n        extend: w,\n        find: T,\n        fireEvent: v,\n        isNumber: E,\n        pick: S\n      } = r,\n      C = [];\n    function L() {\n      let e = this.getCSV(!0);\n      d(V(e, \"text/csv\") || \"data:text/csv,\\uFEFF\" + encodeURIComponent(e), this.getFilename() + \".csv\");\n    }\n    function U() {\n      let e = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>Ark1</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>td{border:none;font-family: Calibri, sans-serif;} .number{mso-number-format:\"0.00\";} .text{ mso-number-format:\"@\";}</style><meta name=ProgId content=Excel.Sheet><meta charset=UTF-8></head><body>' + this.getTable(!0) + \"</body></html>\";\n      d(V(e, \"application/vnd.ms-excel\") || \"data:application/vnd.ms-excel;base64,\" + l.btoa(unescape(encodeURIComponent(e))), this.getFilename() + \".xls\");\n    }\n    function A(e) {\n      let t = \"\",\n        a = this.getDataRows(),\n        o = this.options.exporting.csv,\n        n = S(o.decimalPoint, \",\" !== o.itemDelimiter && e ? 1.1.toLocaleString()[1] : \".\"),\n        i = S(o.itemDelimiter, \",\" === n ? \";\" : \",\"),\n        r = o.lineDelimiter;\n      return a.forEach((e, o) => {\n        let s = \"\",\n          l = e.length;\n        for (; l--;) \"string\" == typeof (s = e[l]) && (s = `\"${s}\"`), \"number\" == typeof s && \".\" !== n && (s = s.toString().replace(\".\", n)), e[l] = s;\n        e.length = a.length ? a[0].length : 0, t += e.join(i), o < a.length - 1 && (t += r);\n      }), t;\n    }\n    function R(e) {\n      let t, a;\n      let o = this.hasParallelCoordinates,\n        n = this.time,\n        i = this.options.exporting && this.options.exporting.csv || {},\n        r = this.xAxis,\n        s = {},\n        l = [],\n        h = [],\n        c = [],\n        d = this.options.lang,\n        u = d.exportData,\n        m = u.categoryHeader,\n        f = u.categoryDatetimeHeader,\n        x = function (t, a, o) {\n          if (i.columnHeaderFormatter) {\n            let e = i.columnHeaderFormatter(t, a, o);\n            if (!1 !== e) return e;\n          }\n          return t ? t instanceof p ? e ? {\n            columnTitle: o > 1 ? a : t.name,\n            topLevelColumnTitle: t.name\n          } : t.name + (o > 1 ? \" (\" + a + \")\" : \"\") : t.options.title && t.options.title.text || (t.dateTime ? f : m) : m;\n        },\n        g = function (e, t, a) {\n          let o = {},\n            n = {};\n          return t.forEach(function (t) {\n            let i = (e.keyToAxis && e.keyToAxis[t] || t) + \"Axis\",\n              r = E(a) ? e.chart[i][a] : e[i];\n            o[t] = r && r.categories || [], n[t] = r && r.dateTime;\n          }), {\n            categoryMap: o,\n            dateTimeValueAxisMap: n\n          };\n        },\n        b = function (e, t) {\n          let a = e.pointArrayMap || [\"y\"],\n            o = e.data.some(e => void 0 !== e.y && e.name);\n          return o && t && !t.categories && \"name\" !== e.exportKey ? [\"x\", ...a] : a;\n        },\n        y = [],\n        w,\n        C,\n        L,\n        U = 0,\n        A,\n        R;\n      for (A in this.series.forEach(function (t) {\n        let a = t.options.keys,\n          l = t.xAxis,\n          d = a || b(t, l),\n          p = d.length,\n          u = !t.requireSorting && {},\n          m = r.indexOf(l),\n          f = g(t, d),\n          D,\n          w;\n        if (!1 !== t.options.includeInDataExport && !t.options.isInternal && !1 !== t.visible) {\n          for (T(y, function (e) {\n            return e[0] === m;\n          }) || y.push([m, U]), w = 0; w < p;) L = x(t, d[w], d.length), c.push(L.columnTitle || L), e && h.push(L.topLevelColumnTitle || L), w++;\n          (D = {\n            chart: t.chart,\n            autoIncrement: t.autoIncrement,\n            options: t.options,\n            pointArrayMap: t.pointArrayMap,\n            index: t.index\n          }).index, t.options.data.forEach(function (e, a) {\n            let r, h, c;\n            let x = {\n              series: D\n            };\n            o && (f = g(t, d, a)), t.pointClass.prototype.applyOptions.apply(x, [e]);\n            let b = t.data[a] && t.data[a].name;\n            if (r = (x.x ?? \"\") + \",\" + b, w = 0, (!l || \"name\" === t.exportKey || !o && l && l.hasNames && b) && (r = b), u && (u[r] && (r += \"|\" + a), u[r] = !0), s[r]) {\n              let e = `${r},${s[r].pointers[t.index]}`,\n                a = r;\n              s[r].pointers[t.index] && (s[e] || (s[e] = [], s[e].xValues = [], s[e].pointers = []), r = e), s[a].pointers[t.index] += 1;\n            } else {\n              s[r] = [], s[r].xValues = [];\n              let e = [];\n              for (let a = 0; a < t.chart.series.length; a++) e[a] = 0;\n              s[r].pointers = e, s[r].pointers[t.index] = 1;\n            }\n            for (s[r].x = x.x, s[r].name = b, s[r].xValues[m] = x.x; w < p;) c = x[h = d[w]], s[r][U + w] = S(f.categoryMap[h][c], f.dateTimeValueAxisMap[h] ? n.dateFormat(i.dateFormat, c) : null, c), w++;\n          }), U += w;\n        }\n      }), s) Object.hasOwnProperty.call(s, A) && l.push(s[A]);\n      for (C = e ? [h, c] : [c], U = y.length; U--;) t = y[U][0], a = y[U][1], w = r[t], l.sort(function (e, a) {\n        return e.xValues[t] - a.xValues[t];\n      }), R = x(w), C[0].splice(a, 0, R), e && C[1] && C[1].splice(a, 0, R), l.forEach(function (e) {\n        let t = e.name;\n        w && !D(t) && (w.dateTime ? (e.x instanceof Date && (e.x = e.x.getTime()), t = n.dateFormat(i.dateFormat, e.x)) : t = w.categories ? S(w.names[e.x], w.categories[e.x], e.x) : e.x), e.splice(a, 0, t);\n      });\n      return v(this, \"exportData\", {\n        dataRows: C = C.concat(l)\n      }), C;\n    }\n    function k(e) {\n      let t = e => {\n          if (!e.tagName || \"#text\" === e.tagName) return e.textContent || \"\";\n          let a = e.attributes,\n            o = `<${e.tagName}`;\n          return a && Object.keys(a).forEach(e => {\n            let t = a[e];\n            o += ` ${e}=\"${t}\"`;\n          }), o += \">\" + (e.textContent || \"\"), (e.children || []).forEach(e => {\n            o += t(e);\n          }), o += `</${e.tagName}>`;\n        },\n        a = this.getTableAST(e);\n      return t(a);\n    }\n    function H(e) {\n      let t = 0,\n        a = [],\n        o = this.options,\n        n = e ? 1.1.toLocaleString()[1] : \".\",\n        i = S(o.exporting.useMultiLevelHeaders, !0),\n        r = this.getDataRows(i),\n        s = i ? r.shift() : null,\n        l = r.shift(),\n        h = function (e, t) {\n          let a = e.length;\n          if (t.length !== a) return !1;\n          for (; a--;) if (e[a] !== t[a]) return !1;\n          return !0;\n        },\n        c = function (e, t, a, o) {\n          let i = S(o, \"\"),\n            r = \"highcharts-text\" + (t ? \" \" + t : \"\");\n          return \"number\" == typeof i ? (i = i.toString(), \",\" === n && (i = i.replace(\".\", n)), r = \"highcharts-number\") : o || (r = \"highcharts-empty\"), {\n            tagName: e,\n            attributes: a = w({\n              class: r\n            }, a),\n            textContent: i\n          };\n        };\n      !1 !== o.exporting.tableCaption && a.push({\n        tagName: \"caption\",\n        attributes: {\n          class: \"highcharts-table-caption\"\n        },\n        textContent: S(o.exporting.tableCaption, o.title.text ? o.title.text : \"Chart\")\n      });\n      for (let e = 0, a = r.length; e < a; ++e) r[e].length > t && (t = r[e].length);\n      a.push(function (e, t, a) {\n        let n = [],\n          r = 0,\n          s = a || t && t.length,\n          l,\n          d = 0,\n          p;\n        if (i && e && t && !h(e, t)) {\n          let a = [];\n          for (; r < s; ++r) if ((l = e[r]) === e[r + 1]) ++d;else if (d) a.push(c(\"th\", \"highcharts-table-topheading\", {\n            scope: \"col\",\n            colspan: d + 1\n          }, l)), d = 0;else {\n            l === t[r] ? o.exporting.useRowspanHeaders ? (p = 2, delete t[r]) : (p = 1, t[r] = \"\") : p = 1;\n            let e = c(\"th\", \"highcharts-table-topheading\", {\n              scope: \"col\"\n            }, l);\n            p > 1 && e.attributes && (e.attributes.valign = \"top\", e.attributes.rowspan = p), a.push(e);\n          }\n          n.push({\n            tagName: \"tr\",\n            children: a\n          });\n        }\n        if (t) {\n          let e = [];\n          for (r = 0, s = t.length; r < s; ++r) void 0 !== t[r] && e.push(c(\"th\", null, {\n            scope: \"col\"\n          }, t[r]));\n          n.push({\n            tagName: \"tr\",\n            children: e\n          });\n        }\n        return {\n          tagName: \"thead\",\n          children: n\n        };\n      }(s, l, Math.max(t, l.length)));\n      let d = [];\n      r.forEach(function (e) {\n        let a = [];\n        for (let o = 0; o < t; o++) a.push(c(o ? \"td\" : \"th\", null, o ? {} : {\n          scope: \"row\"\n        }, e[o]));\n        d.push({\n          tagName: \"tr\",\n          children: a\n        });\n      }), a.push({\n        tagName: \"tbody\",\n        children: d\n      });\n      let p = {\n        tree: {\n          tagName: \"table\",\n          id: `highcharts-data-table-${this.index}`,\n          children: a\n        }\n      };\n      return v(this, \"aftergetTableAST\", p), p.tree;\n    }\n    function O() {\n      this.toggleDataTable(!1);\n    }\n    function j(t) {\n      t = S(t, !this.isDataTableVisible);\n      let a = t && !this.dataTableDiv;\n      if (a && (this.dataTableDiv = s.createElement(\"div\"), this.dataTableDiv.className = \"highcharts-data-table\", this.renderTo.parentNode.insertBefore(this.dataTableDiv, this.renderTo.nextSibling)), this.dataTableDiv) {\n        let o = this.dataTableDiv.style,\n          n = o.display;\n        if (o.display = t ? \"block\" : \"none\", t) {\n          this.dataTableDiv.innerHTML = e.emptyHTML;\n          let t = new e([this.getTableAST()]);\n          t.addToDOM(this.dataTableDiv), v(this, \"afterViewData\", {\n            element: this.dataTableDiv,\n            wasHidden: a || n !== o.display\n          });\n        } else v(this, \"afterHideData\");\n      }\n      this.isDataTableVisible = t;\n      let o = this.exportDivElements,\n        n = this.options.exporting,\n        i = n && n.buttons && n.buttons.contextButton.menuItems,\n        r = this.options.lang;\n      if (n && n.menuItemDefinitions && r && r.viewData && r.hideData && i && o) {\n        let t = o[i.indexOf(\"viewData\")];\n        t && e.setElementHTML(t, this.isDataTableVisible ? r.hideData : r.viewData);\n      }\n    }\n    function N() {\n      this.toggleDataTable(!0);\n    }\n    function V(e, t) {\n      let a = l.navigator,\n        o = l.URL || l.webkitURL || l;\n      try {\n        if (a.msSaveOrOpenBlob && l.MSBlobBuilder) {\n          let t = new l.MSBlobBuilder();\n          return t.append(e), t.getBlob(\"image/svg+xml\");\n        }\n        return o.createObjectURL(new l.Blob([\"\\uFEFF\" + e], {\n          type: t\n        }));\n      } catch (e) {}\n    }\n    function B() {\n      let e = this,\n        t = e.dataTableDiv,\n        a = (e, t) => e.children[t].textContent,\n        o = (e, t) => (o, n) => {\n          var i, r;\n          return i = a(t ? o : n, e), r = a(t ? n : o, e), \"\" === i || \"\" === r || isNaN(i) || isNaN(r) ? i.toString().localeCompare(r) : i - r;\n        };\n      if (t && e.options.exporting && e.options.exporting.allowTableSorting) {\n        let a = t.querySelector(\"thead tr\");\n        a && a.childNodes.forEach(a => {\n          let n = a.closest(\"table\");\n          a.addEventListener(\"click\", function () {\n            let i = [...t.querySelectorAll(\"tr:not(thead tr)\")],\n              r = [...a.parentNode.children];\n            i.sort(o(r.indexOf(a), e.ascendingOrderInTable = !e.ascendingOrderInTable)).forEach(e => {\n              n.appendChild(e);\n            }), r.forEach(e => {\n              [\"highcharts-sort-ascending\", \"highcharts-sort-descending\"].forEach(t => {\n                e.classList.contains(t) && e.classList.remove(t);\n              });\n            }), a.classList.add(e.ascendingOrderInTable ? \"highcharts-sort-ascending\" : \"highcharts-sort-descending\");\n          });\n        });\n      }\n    }\n    function F() {\n      this.options && this.options.exporting && this.options.exporting.showTable && !this.options.chart.forExport && this.viewData();\n    }\n    return {\n      compose: function (e) {\n        if (r.pushUnique(C, e)) {\n          y(e, \"afterViewData\", B), y(e, \"render\", F);\n          let t = e.prototype;\n          t.downloadCSV = L, t.downloadXLS = U, t.getCSV = A, t.getDataRows = R, t.getTable = k, t.getTableAST = H, t.hideData = O, t.toggleDataTable = j, t.viewData = N;\n        }\n        if (r.pushUnique(C, c)) {\n          let e = h().exporting;\n          e && (w(e.menuItemDefinitions, {\n            downloadCSV: {\n              textKey: \"downloadCSV\",\n              onclick: function () {\n                this.downloadCSV();\n              }\n            },\n            downloadXLS: {\n              textKey: \"downloadXLS\",\n              onclick: function () {\n                this.downloadXLS();\n              }\n            },\n            viewData: {\n              textKey: \"viewData\",\n              onclick: function () {\n                this.toggleDataTable();\n              }\n            }\n          }), e.buttons && e.buttons.contextButton.menuItems && e.buttons.contextButton.menuItems.push(\"separator\", \"downloadCSV\", \"downloadXLS\", \"viewData\")), c(t);\n        }\n        u && r.pushUnique(C, u) && (u.prototype.keyToAxis = {\n          low: \"y\",\n          high: \"y\"\n        }), m && r.pushUnique(C, m) && (m.prototype.exportKey = \"name\", m.prototype.keyToAxis = {\n          start: \"x\",\n          end: \"x\"\n        }), b && r.pushUnique(C, b) && (b.prototype.keyToAxis = {\n          x2: \"x\"\n        }), f && r.pushUnique(C, f) && (f.prototype.exportKey = \"name\"), x && r.pushUnique(C, x) && (x.prototype.exportKey = \"name\"), g && r.pushUnique(C, g) && (g.prototype.exportKey = \"name\");\n      }\n    };\n  }), a(t, \"masters/modules/export-data.src.js\", [t[\"Core/Globals.js\"], t[\"Extensions/DownloadURL.js\"], t[\"Extensions/ExportData/ExportData.js\"]], function (e, t, a) {\n    e.dataURLtoBlob = t.dataURLtoBlob, e.downloadURL = t.downloadURL, a.compose(e.Chart);\n  });\n}); //# sourceMappingURL=export-data.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}