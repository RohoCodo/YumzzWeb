{"ast":null,"code":"import _asyncToGenerator from \"/Users/rohantyagi/Desktop/landing-website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/storage\";\nlet WasmService = /*#__PURE__*/(() => {\n  class WasmService {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage;\n      this.isModuleInitialized = false;\n      this.recipeData = [];\n      this.ingredientQuantAmtData = [];\n      this.getIngredientsFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getRecipesTextFile\";\n      this.getSalesFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getSalesFile\";\n      this.getQuantsAmtsFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getPurchasingTextFile\";\n      this.initModule();\n    }\n    initModule() {\n      if (!this.isModuleInitialized) {\n        const script = document.createElement('script');\n        script.src = 'assets/COGScalc.js';\n        script.onload = () => {\n          // The script has been fully loaded, and you can now access the WebAssembly module\n          console.log('Module:', Module); // Add this line for debugging\n          this.cogCalcModule = Module;\n          // Initialization logic, if needed\n          this.isModuleInitialized = true;\n        };\n        document.body.appendChild(script);\n      }\n    }\n    // Define functions to interact with your WebAssembly module\n    runAnalysis(data) {\n      //get the data frpom Firebase Storage and dispaly the outputs here.\n      // Example: Call a function from the WebAssembly module\n      // return this.cogCalcModule.yourAnalysisFunction(data);\n    }\n    //   runProfitMarginCalculator(foodCosts: number[]): number[] {\n    //     if (!this.isModuleInitialized) {\n    //       console.error('WebAssembly module not initialized.');\n    //       return [];\n    //     }\n    //     // Call the exported function from the WebAssembly module\n    //     // Adjust the function name and parameters based on your C++ code\n    //     const result = Module._calculateProfitMargin(foodCosts);\n    //     // Convert the result to an array (adjust as needed)\n    //     const resultArray = new Float64Array(result);\n    //     return Array.from(resultArray);\n    //   }\n    // private getIngredientDataFromServer(dishName: string): any {\n    // Get a reference to the file in Firebase Storage\n    // Get the download URL of the file\n    // return ref.getDownloadURL().toPromise().then(url => {\n    //   // Fetch the text file content using Angular's HttpClient\n    //   return this.http.get(url, { responseType: 'text' }).toPromise();\n    // }).then((fileContent: string) => {\n    //   // Process the file content to get the dish costs for the specified dishName\n    //   const row = this.findRowWithFirstElement(fileContent, dishName);\n    //   const line = this.getLineByRowNumber(fileContent, row);\n    //   const dishCosts = this.getDishCostsFromLine(line);\n    //   return dishCosts;\n    // });\n    //   Simulating data retrieval from the server (replace with your actual API call)\n    //   This should return an object with ingredients, each having quantity, quantityPerUnit, and unitPrice\n    //   return {\n    //     ingredients: [\n    //       { name: 'Ingredient1', quantity: 100, quantityPerUnit: 10, unitPrice: 5.0 },\n    //       { name: 'Ingredient2', quantity: 50, quantityPerUnit: 5, unitPrice: 2.0 },\n    //       // Add more ingredients as needed\n    //     ]\n    //   };\n    // }\n    getIngredientDataFromServer(dishName) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n        return _this.http.get(_this.getIngredientsFileURL);\n        // const bucket = this.storage.ref('virtual-menu-59b9e.appspot.com'); // Replace with your actual bucket name\n        // const filePath = 'gs://virtual-menu-59b9e.appspot.com/Restaurant/Kathmandu-Cuisine/Recipes/ingredients.txt'; \n        // const fileRef = this.storage.refFromURL(filePath);\n        // // const downloadUrl = await storageRef.getDownloadURL().toPromise();\n        //   // Use the download URL to make a request to your server or fetch the content as needed.\n        //   // In this example, I'm assuming you're making a GET request to the server.\n        // try {\n        //   const storageRef = this.storage.ref(filePath);\n        //   const downloadUrl = await storageRef.getDownloadURL().toPromise();\n        //   // Use the download URL to make a request to your server or fetch the content as needed.\n        //   // In this example, I'm assuming you're making a GET request to the server.\n        //   const response = await fetch(downloadUrl);\n        //   const content = await response.text();\n        //   return content;\n        // } catch (error) {\n        //   console.error(error);\n        //   throw error;\n        // }\n      })();\n    }\n\n    getQuantAmtDataFromServer(dishName) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n        const bucket = _this2.storage.ref('virtual-menu-59b9e.appspot.com'); // Replace with your actual bucket name\n        const filePath = 'gs://virtual-menu-59b9e.appspot.com/Restaurant/Kathmandu-Cuisine/Purchasing/ingredientsQuantAmt.txt';\n        // const downloadUrl = await storageRef.getDownloadURL().toPromise();\n        // Use the download URL to make a request to your server or fetch the content as needed.\n        // In this example, I'm assuming you're making a GET request to the server.\n        try {\n          const storageRef = _this2.storage.ref(filePath);\n          const downloadUrl = yield storageRef.getDownloadURL().toPromise();\n          // Use the download URL to make a request to your server or fetch the content as needed.\n          // In this example, I'm assuming you're making a GET request to the server.\n          const response = yield fetch(downloadUrl);\n          const content = yield response.text();\n          return content;\n        } catch (error) {\n          console.error(error);\n          throw error;\n        }\n      })();\n    }\n    //   // Helper method to read the contents of a text file\n    //   private readTextFile(filePath: string): string {\n    //     const file = FS.readFile(filePath, { encoding: 'utf8' });\n    //     return file;\n    //   }\n    // Helper method to find a row with a specified first element in a CSV-like text file\n    findRowWithFirstElement(fileContents, element) {\n      // Implementation logic for finding the row\n      // ...\n      return this.cogCalcModule.findRowWithFirstElement(fileContents, element);\n    }\n    // Helper method to get a specific line by row number in a text file\n    getLineByRowNumber(fileContents, rowNumber) {\n      // Implementation logic for getting the line\n      return this.cogCalcModule.getLineByRowNumber(fileContents, rowNumber);\n    }\n    calculateOptimalOrderQuantity(orderCost, sales, storingCost) {\n      return this.cogCalcModule.calculateOptimalOrderQuantity(orderCost, sales, storingCost);\n    }\n    calculateSafetyStock(maxLeadTime, averageLeadTime, averageSales) {\n      return this.cogCalcModule.calculateSafetyStock(maxLeadTime, averageLeadTime, averageSales);\n    }\n    calculateReorderPoint(safetyStock, averageConsumption, leadTime) {\n      return this.cogCalcModule.calculateReorderPoint(safetyStock, averageConsumption, leadTime);\n    }\n    calculateProfitMargin(fileName, dishPrice, dishName, more) {\n      return new Promise((resolve, reject) => {\n        if (!this.isModuleInitialized) {\n          reject('WebAssembly module not initialized.');\n          return;\n        }\n        // Use Module to call the calculateProfitMargin function\n        this.cogCalcModule.calculateProfitMargin(dishPrice, this.calculateIngredientDirectCostfromData(dishName), result => {\n          resolve(result);\n        });\n      });\n    }\n    parseIngredientsTxtData(ingredientsTxtData) {\n      const lines = ingredientsTxtData.split('\\n');\n      const ingredients = [];\n      lines.forEach(line => {\n        const values = line.split(',');\n        const recipeName = values[0];\n        const dishPrice = parseFloat(values[1]);\n        for (let i = 2; i < values.length; i += 2) {\n          const ingredientName = values[i];\n          const ingredientQuantity = parseFloat(values[i + 1]);\n          ingredients.push({\n            name: ingredientName,\n            quantity: ingredientQuantity\n          });\n        }\n        this.recipeData.push({\n          recipeName,\n          dishPrice,\n          ingredients\n        });\n      });\n      return ingredients;\n    }\n    parseIngredientsQuantAmtTxtData(ingredientsQuantAmtTxtData) {\n      const lines = ingredientsQuantAmtTxtData.split('\\n');\n      lines.forEach(line => {\n        const values = line.split(',');\n        const ingredientName = values[0];\n        const quantity = parseFloat(values[1]);\n        const price = parseFloat(values[2]);\n        this.ingredientQuantAmtData.push({\n          name: ingredientName,\n          quantity,\n          price\n        });\n      });\n      return this.ingredientQuantAmtData;\n    }\n    calculateSingleIngredientDirectCost(ingredAmt, ingredPrice, ingredQuant) {\n      // Implement your cost calculation logic here\n      // Example: return ingredAmt * ingredPrice / ingredQuant;\n      return ingredAmt * (ingredQuant / ingredPrice);\n    }\n    calculateIngredientDirectCostfromData(dishName) {\n      // Simulating data retrieval (replace with your actual data retrieval logic)\n      const ingredientData = this.getIngredientDataFromServer(dishName);\n      const quantAmtRequest = this.getQuantAmtDataFromServer(dishName);\n      let dishInfo;\n      let purchasingInfo;\n      ingredientData.then(result => {\n        // Use the result string here\n        result.subscribe(data => {\n          dishInfo = this.parseIngredientsTxtData(data);\n        });\n      });\n      quantAmtRequest.then(result => {\n        // Use the result string here\n        purchasingInfo = this.parseIngredientsQuantAmtTxtData(result);\n      });\n      let costs = 0;\n      for (const ingredient of dishInfo.ingredients) {\n        const ingredAmt = ingredient.quantity;\n        const ingredQuant = ingredient.quantityPerUnit;\n        const ingredPrice = ingredient.unitPrice;\n        const cost = this.calculateSingleIngredientDirectCost(ingredAmt, ingredPrice, ingredQuant);\n        costs += cost;\n      }\n      return of(costs);\n    }\n    // private calculateIngredientDirectCost(dishName: string): Observable<number> {\n    //   // Make HTTP requests to get ingredient data from text files\n    //   //need to change this\n    //   return this.calculateIngredientDirectCostFromData(dishName);\n    // }\n    calculateOrderingFrequency(demandRate, orderingCost, holdingCost) {\n      return this.cogCalcModule.calculateOrderingFrequency(demandRate, orderingCost, holdingCost);\n    }\n    dishExistsInFile(fileContent, targetWords) {\n      return this.cogCalcModule.dishExistsInFile(fileContent, targetWords);\n    }\n    static #_ = this.ɵfac = function WasmService_Factory(t) {\n      return new (t || WasmService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireStorage));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WasmService,\n      factory: WasmService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WasmService;\n})();\nexport { WasmService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}