{"ast":null,"code":"import 'firebase/compat/functions';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/fire';\nimport { VERSION } from '@angular/fire';\nimport * as i2 from '@angular/fire/app-check';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵapplyMixins } from '@angular/fire/compat';\nimport { of, from } from 'rxjs';\nimport { observeOn, switchMap, map, shareReplay } from 'rxjs/operators';\nimport firebase from 'firebase/compat/app';\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\n// Export a null object with the same keys as firebase/compat/functions, so Proxy can work with proxy-polyfill in Internet Explorer\nconst proxyPolyfillCompat = {\n  useEmulator: null,\n  useFunctionsEmulator: null,\n  httpsCallable: null\n};\nconst ORIGIN = /*#__PURE__*/new InjectionToken('angularfire2.functions.origin');\nconst REGION = /*#__PURE__*/new InjectionToken('angularfire2.functions.region');\nconst USE_EMULATOR = /*#__PURE__*/new InjectionToken('angularfire2.functions.use-emulator');\nlet AngularFireFunctions = /*#__PURE__*/(() => {\n  class AngularFireFunctions {\n    httpsCallable;\n    constructor(options, name, zone, schedulers, region, origin, _useEmulator,\n    // can't use the tuple here\n    _appCheckInstances) {\n      const useEmulator = _useEmulator;\n      const functions = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => import('firebase/compat/functions')), map(() => ɵfirebaseAppFactory(options, zone, name)), map(app => ɵcacheInstance(`${app.name}.functions.${region || origin}`, 'AngularFireFunctions', app.name, () => {\n        let functions;\n        if (region && origin) {\n          throw new Error('REGION and ORIGIN can\\'t be used at the same time.');\n        }\n        functions = app.functions(region || origin || undefined);\n        if (useEmulator) {\n          functions.useEmulator(...useEmulator);\n        }\n        return functions;\n      }, [region, origin, useEmulator])), shareReplay({\n        bufferSize: 1,\n        refCount: false\n      }));\n      this.httpsCallable = (name, options) => data => from(functions).pipe(observeOn(schedulers.insideAngular), switchMap(functions => functions.httpsCallable(name, options)(data)), map(r => r.data));\n      return ɵlazySDKProxy(this, functions, zone);\n    }\n    static ɵfac = function AngularFireFunctions_Factory(t) {\n      return new (t || AngularFireFunctions)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(REGION, 8), i0.ɵɵinject(ORIGIN, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AppCheckInstances, 8));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: AngularFireFunctions,\n      factory: AngularFireFunctions.ɵfac,\n      providedIn: 'any'\n    });\n  }\n  return AngularFireFunctions;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*#__PURE__*/ɵapplyMixins(AngularFireFunctions, [proxyPolyfillCompat]);\nlet AngularFireFunctionsModule = /*#__PURE__*/(() => {\n  class AngularFireFunctionsModule {\n    constructor() {\n      firebase.registerVersion('angularfire', VERSION.full, 'fn-compat');\n    }\n    static ɵfac = function AngularFireFunctionsModule_Factory(t) {\n      return new (t || AngularFireFunctionsModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: AngularFireFunctionsModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [AngularFireFunctions]\n    });\n  }\n  return AngularFireFunctionsModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireFunctions, AngularFireFunctionsModule, ORIGIN, REGION, USE_EMULATOR };\n//# sourceMappingURL=angular-fire-compat-functions.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}