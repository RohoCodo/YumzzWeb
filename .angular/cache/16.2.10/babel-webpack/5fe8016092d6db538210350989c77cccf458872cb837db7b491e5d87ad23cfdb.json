{"ast":null,"code":"import _asyncToGenerator from \"/Users/rohantyagi/Desktop/landing-website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/storage\";\nimport * as i3 from \"@angular/fire/compat/functions\";\nlet WasmService = /*#__PURE__*/(() => {\n  class WasmService {\n    constructor(http, storage, fns) {\n      this.http = http;\n      this.storage = storage;\n      this.fns = fns;\n      this.isModuleInitialized = false;\n      this.recipeData = [];\n      this.ingredientQuantAmtData = [];\n      this.getIngredientsFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getRecipesTextFile\";\n      this.getSalesFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getSalesFile\";\n      this.getQuantsAmtsFileURL = \"https://us-central1-virtual-menu-59b9e.cloudfunctions.net/getPurchasingTextFile\";\n      this.initModule();\n    }\n    initModule() {\n      if (!this.isModuleInitialized) {\n        const script = document.createElement('script');\n        script.src = 'assets/COGScalc.js';\n        script.onload = () => {\n          // The script has been fully loaded, and you can now access the WebAssembly module\n          console.log('Module:', Module); // Add this line for debugging\n          this.cogCalcModule = Module;\n          // Initialization logic, if needed\n          this.isModuleInitialized = true;\n        };\n        document.body.appendChild(script);\n      }\n    }\n    // Define functions to interact with your WebAssembly module\n    runAnalysis(data) {\n      //get the data frpom Firebase Storage and dispaly the outputs here.\n      // Example: Call a function from the WebAssembly module\n      // return this.cogCalcModule.yourAnalysisFunction(data);\n    }\n    getIngredientDataFromServer(dishName) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n        // get the ingredients txt returned here\n        console.log(\"why yes\");\n        console.log(dishName);\n        const filePath = 'assets/ingredients.txt'; // Adjust the path accordingly\n        let fileContent = '';\n        yield _this.http.get(filePath, {\n          responseType: 'text'\n        }).subscribe(content => {\n          fileContent = content;\n          console.log(\"getting file content:\");\n          console.log(fileContent);\n          return content;\n        }, error => {\n          console.error('Error fetching file:', error);\n        });\n        return null;\n        // const filePath = this.getIngredientsFileURL; // Replace with the actual file path\n        // const call = this.fns.httpsCallable('getRecipesTextFile');\n        // const data$ = call({}); \n        // console.log(data$);\n        // data$.subscribe(\n        // (downloadURL: string) => {\n        //   console.log(`File download URL: ${downloadURL}`);\n        //   // Handle the download URL as needed\n        //   return downloadURL;\n        // },\n        // (error) => {\n        //   console.error('Error getting file from storage:', error);\n        // }\n        // );\n        // this.http.get\n        // return this.http.get(this.getIngredientsFileURL);\n      })();\n    }\n\n    getFileFromStorage(filePath) {\n      if (this.checkFileExists(filePath)) {\n        const storageRef = this.storage.ref(filePath);\n        return storageRef.getDownloadURL();\n      }\n    }\n    checkFileExists(filename) {\n      const storageRef = this.storage.ref(filename);\n      storageRef.getDownloadURL().subscribe(url => {\n        console.log(`File ${filename} exists. URL: ${url}`);\n        return true;\n      }, error => {\n        if (error.code === 'storage/object-not-found') {\n          console.log(`File ${filename} does not exist.`);\n        } else {\n          console.error('Error checking file existence:', error);\n        }\n        return false;\n      });\n      return false;\n    }\n    getQuantAmtDataFromServer(dishName) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n        const filePath = 'assets/ingredientsQuantAmt.txt'; // Adjust the path accordingly\n        let fileContent = '';\n        _this2.http.get(filePath, {\n          responseType: 'text'\n        }).subscribe(content => {\n          fileContent = content;\n          //console.log(fileContent);\n          return content;\n        }, error => {\n          console.error('Error fetching file:', error);\n        });\n        return null;\n        // const filePath = this.getQuantsAmtsFileURL; // Replace with the actual file path\n        // const call = this.fns.httpsCallable('getPurchasingTextFile');\n        // const data$ = call({}); \n        // console.log(data$);\n        //   data$.subscribe(\n        //   (downloadURL: string) => {\n        //     console.log(`File download URL: ${downloadURL}`);\n        //     // Handle the download URL as needed\n        //     return downloadURL;\n        //   },\n        //   (error) => {\n        //     console.error('Error getting file from storage:', error);\n        //   }\n        // );\n      })();\n    }\n\n    getSalesDataFromServer(dishName) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        // Replace 'path/to/your/ingredients.txt' with the actual path in your Firebase Storage\n        const filePath = 'assets/sales.csv'; // Adjust the path accordingly\n        let fileContent = '';\n        _this3.http.get(filePath, {\n          responseType: 'text'\n        }).subscribe(content => {\n          fileContent = content;\n          //console.log(fileContent);\n          return fileContent;\n        }, error => {\n          console.error('Error fetching file:', error);\n        });\n        return null;\n        // const filePath = this.getSalesFileURL; // Replace with the actual file path\n        //   this.getFileFromStorage(filePath).subscribe(\n        //   (downloadURL: string) => {\n        //     console.log(`File download URL: ${downloadURL}`);\n        //     // Handle the download URL as needed\n        //     return downloadURL;\n        //   },\n        //   (error) => {\n        //     console.error('Error getting file from storage:', error);\n        //   }\n        // );\n      })();\n    }\n    //   // Helper method to read the contents of a text file\n    //   private readTextFile(filePath: string): string {\n    //     const file = FS.readFile(filePath, { encoding: 'utf8' });\n    //     return file;\n    //   }\n    // Helper method to find a row with a specified first element in a CSV-like text file\n    findRowWithFirstElement(fileContents, element) {\n      // Implementation logic for finding the row\n      // ...\n      return this.cogCalcModule.findRowWithFirstElement(fileContents, element);\n    }\n    // Helper method to get a specific line by row number in a text file\n    getLineByRowNumber(fileContents, rowNumber) {\n      // Implementation logic for getting the line\n      return this.cogCalcModule.getLineByRowNumber(fileContents, rowNumber);\n    }\n    calculateOptimalOrderQuantity(orderCost, sales, storingCost) {\n      return this.cogCalcModule.calculateOptimalOrderQuantity(orderCost, sales, storingCost);\n    }\n    calculateSafetyStock(maxLeadTime, averageLeadTime, averageSales) {\n      return this.cogCalcModule.calculateSafetyStock(maxLeadTime, averageLeadTime, averageSales);\n    }\n    calculateReorderPoint(safetyStock, averageConsumption, leadTime) {\n      return this.cogCalcModule.calculateReorderPoint(safetyStock, averageConsumption, leadTime);\n    }\n    calculateProfitMargin(fileName, dishPrice, dishName, more) {\n      return new Promise((resolve, reject) => {\n        if (!this.isModuleInitialized) {\n          reject('WebAssembly module not initialized.');\n          return;\n        }\n        // Use Module to call the calculateProfitMargin function\n        this.cogCalcModule.calculateProfitMargin(dishPrice, this.calculateIngredientDirectCostfromData(dishName), result => {\n          resolve(result);\n        });\n      });\n    }\n    parseIngredientsTxtData(ingredientsTxtData) {\n      const lines = ingredientsTxtData.split(';');\n      const ingredients = [];\n      lines.forEach(line => {\n        const values = line.split(',');\n        if (values.length > 1 && values[0].length > 2) {\n          const name = values[0];\n          const dishPrice = parseFloat(values[1]);\n          for (let i = 2; i < values.length; i += 2) {\n            const ingredientName = values[i];\n            const ingredientQuantity = parseFloat(values[i + 1]);\n            ingredients.push({\n              name: ingredientName,\n              quantity: ingredientQuantity\n            });\n          }\n          this.recipeData.push({\n            name,\n            dishPrice,\n            ingredients\n          });\n        }\n      });\n      return this.recipeData;\n    }\n    parseIngredientsQuantAmtTxtData(ingredientsQuantAmtTxtData) {\n      const lines = ingredientsQuantAmtTxtData.split('\\n');\n      lines.forEach(line => {\n        const values = line.split(',');\n        if (values.length > 1 && values[0].length > 2) {\n          const ingredientName = values[0];\n          const quantity = parseFloat(values[1]);\n          const price = parseFloat(values[2]);\n          this.ingredientQuantAmtData.push({\n            name: ingredientName,\n            quantity,\n            price\n          });\n        }\n      });\n      return this.ingredientQuantAmtData;\n    }\n    calculateSingleIngredientDirectCost(ingredAmt, ingredPrice, ingredQuant) {\n      // Implement your cost calculation logic here\n      // Example: return ingredAmt * ingredPrice / ingredQuant;\n      return ingredAmt * (ingredQuant / ingredPrice);\n    }\n    calculateIngredientDirectCostfromData(dishName) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        //unwrap promise before sending it\n        // trying to make promise work\n        // console.log(\"calculating\");\n        try {\n          const ingredientsResponse = yield _this4.http.get('assets/ingredients.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const dishInfo = yield _this4.parseIngredientsTxtData(ingredientsResponse);\n          // console.log(dishInfo);\n          const dishIn = dishInfo.find(recipe => recipe.name === dishName);\n          // console.log(dishIn);\n          // Fetch ingredientsQuantAmt.txt\n          const purchasingInfoResponse = yield _this4.http.get('assets/ingredientsQuantAmt.txt', {\n            responseType: 'text'\n          }).toPromise();\n          const purchasingInfo = yield _this4.parseIngredientsQuantAmtTxtData(purchasingInfoResponse);\n          // console.log(purchasingInfo);\n          let costs = 0;\n          // console.log(dishIn.ingredients);\n          let ingredient;\n          for (ingredient of dishIn.ingredients) {\n            const ingredQA = purchasingInfo.find(ingredQuantAmt => ingredQuantAmt.name == ingredient.name);\n            const ingredAmt = ingredQA.price;\n            console.log(ingredQA);\n            const ingredQuant = ingredQA.quantity;\n            console.log(ingredQuant);\n            const ingredPrice = dishIn.dishPrice;\n            console.log(ingredPrice);\n            const cost = yield _this4.calculateSingleIngredientDirectCost(ingredAmt, ingredPrice, ingredQuant);\n            console.log(cost);\n            costs += cost;\n          }\n          console.log(costs);\n          return of(costs);\n        } catch (error) {\n          console.error('Error calculating cost:', error);\n          throw error; // Rethrow the error for the caller to handle\n        }\n      })();\n    }\n    // private calculateIngredientDirectCost(dishName: string): Observable<number> {\n    //   // Make HTTP requests to get ingredient data from text files\n    //   //need to change this\n    //   return this.calculateIngredientDirectCostFromData(dishName);\n    // }\n    calculateOrderingFrequency(demandRate, orderingCost, holdingCost) {\n      return this.cogCalcModule.calculateOrderingFrequency(demandRate, orderingCost, holdingCost);\n    }\n    dishExistsInFile(fileContent, targetWords) {\n      return this.cogCalcModule.dishExistsInFile(fileContent, targetWords);\n    }\n    static #_ = this.ɵfac = function WasmService_Factory(t) {\n      return new (t || WasmService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireStorage), i0.ɵɵinject(i3.AngularFireFunctions));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WasmService,\n      factory: WasmService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WasmService;\n})();\nexport { WasmService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}